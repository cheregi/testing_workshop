# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(MONGODB_URL): ''
    env(MONGODB_DB): ''
    src_to_rad_multiplication: 360.00
    map_meter_width: 4000.00
    laser:
        meter_range: 30.00
        aperture_angle: 360.00
        relative_position: true
    vertices_doubling: 2
    geo_near_sample_radius: 1
    near_retry: 5
    wheel:
        diameter: 130.0
        max_rpm: 26.0
        rotation_rpm: 13
    rover_length: 650.0
    tick_time: 0.005
    tick_per_second: 1
    data_tick_config:
        tick_per_altimeter: 1
        tick_per_gyroscope: 1
        tick_per_laser:     100
        tick_per_position:  1
    rabbitmq:
        host: exchange
        port: 5672
        user: app
        password: gocex
        queue: downstream
        back-queue: upstream

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Document,Migrations,Tests,Kernel.php, Amqp/Thread}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    # App\Controller\:
    #    resource: '../src/Controller'
    #    tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Amqp\RpcClient:
        arguments:
            $config: '%rabbitmq%'
    App\Amqp\RpcServer:
        arguments:
            $config: '%rabbitmq%'
    App\Amqp\ClientDirectConsumer:
        arguments:
            $config: '%rabbitmq%'
    App\Amqp\DirectConsumer:
        arguments:
            $config: '%rabbitmq%'

    App\Command\DataReceiverCommand:
        arguments:
            $config: '%rabbitmq%'

    App\Command\StopCommand:
        arguments:
            $config: '%rabbitmq%'

    App\Amqp\ClientProducer:
        arguments:
            $config: '%rabbitmq%'
    App\Amqp\Producer:
        arguments:
            $config: '%rabbitmq%'

    App\Amqp\Consumer:
        arguments:
            $config: '%rabbitmq%'

    App\Command\EmulationCommand:
        arguments:
            $tickPerSecond: '%tick_per_second%'
            $tickTime: '%tick_time%'
            $dataTickConfig: '%data_tick_config%'

    App\Resolver\MovementResolver:
        arguments:
            $wheelConfiguration: '%wheel%'
            $bodyLength: '%rover_length%'

    App\Command\MovementCommand:
        arguments:
            $tickTime: '%tick_time%'

    App\Document\Repository\MapPointRepository:
        factory: 'Doctrine\ODM\MongoDB\DocumentManager:getRepository'
        arguments: ['App\Document\MapPoint']

    App\Command\MeshLoaderCommand:
        arguments:
            $distanceMultiplication: '%src_to_rad_multiplication%'

    App\Resolver\LaserSensorResolver:
        arguments:
            $mapMeterWidth:      '%map_meter_width%'
            $laserConfiguration: '%laser%'

    App\Modifier\VerticesMultiplier:
        arguments:
            $multiplier: '%vertices_doubling%'

    App\Resolver\FaceResolver:
        arguments:
            $sampleRadius: '%geo_near_sample_radius%'
            $mapMeterWidth: '%map_meter_width%'
            $retry: '%near_retry%'
    DeepCopy\DeepCopy:
        class: DeepCopy\DeepCopy
        arguments:
            - true
